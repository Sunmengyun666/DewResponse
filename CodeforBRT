########### read dew data and run BRT models ##############
rm(list=ls(all=TRUE))

library(dplyr)

source("/BRTcode/jane_1390_sm_appendixs/brt.functions.R")

# Set directories for input data and output results
mainDir <-"/BRTcode/mydt/"
mainDir1 <- "/BRTcode/result/"

# Read all CSV filenames from the input directory
setwd(mainDir)
filenames<-dir(mainDir,'*.csv')
filepath<-sapply(filenames,function(x){
  paste(mainDir,x,sep='')
})

#++++++++++++++++++++ BRT sampling function ++++++++++++++++++
brt_sample <- function(i){
  # i=2

  # Read the i-th CSV file
  df <- read.csv(filepath[i])
  savename <- substring(filenames[i],1,nchar(filenames[i])-7)
  print(savename)
  
  # Select relevant columns and remove rows with missing values
  dewdf <- df %>% 
    select(11:17) %>%
    filter(!is.na(.[1]))
  
  # Remove rows where dew duration is zero
  dewdf <- dewdf %>% filter(DewDur != 0)

  # Prepare an empty data frame for storing relative contributions
  mycontri <- data.frame(row.names = c('DewDur','RH','Rn','SWC',
                                       'Ta', 'VPD'))
  
  
  # Initialize empty lists for partial dependence plot (PDP) data
  n.plots <- nrow(mycontri)
  pred1 <- list(rep(NA,n.plots))
  p1 <- list(rep(NA,n.plots))
  
  # Run BRT 100 times with bootstrapping
  for (t in 1:100){
    # Bootstrap sample
    brt.dt <- dewdf[sample(row.names(dewdf),nrow(dewdf),replace=T),]
    
    # Train BRT model
    brt.tc3.lr001 <- gbm.step(data = brt.dt,
                              gbm.x = 2:7, gbm.y = 1,
                              family = "gaussian",
                              tree.complexity = 3,
                              learning.rate = 0.001,
                              bag.fraction = 0.6)
    
    # Store relative contribution
    mycontri <- cbind(mycontri,
                      rc=merge(brt.tc3.lr001$contributions['rel.inf'],
                               mycontri,
                               by = 'row.names',
                               all.x=TRUE)[,2])

    # Store model performance metrics
    model_info <- data.frame(
      cv_correlation = brt.tc3.lr001$cv.statistics$correlation.mean,
      cv_corr_se = brt.tc3.lr001$cv.statistics$correlation.se,
      cv_deviance = brt.tc3.lr001$cv.statistics$deviance.mean,
      cv_devi_se = brt.tc3.lr001$cv.statistics$deviance.se,
      total_deviance = brt.tc3.lr001$self.statistics$mean.null
    ) %>%
      mutate(devi_diff = total_deviance-cv_deviance)

    if (t==1){
      model_perf <- model_info
    }else{
      model_perf <- rbind(model_perf, model_info)
    }
    
    # Store partial dependence data
    pred.names <- brt.tc3.lr001$gbm.call$predictor.names

    for (b in 1:n.plots){
      resp.matrix <- plot.gbm(brt.tc3.lr001, i.var = b,
                              n.trees = brt.tc3.lr001$n.trees,
                              return.grid = TRUE)
      if (t==1){
        pred1[[b]] <- data.frame(n=resp.matrix[,1])
        p1[[b]] <- data.frame(n=resp.matrix[,2])
      }else{
        pred1[[b]] <- cbind(pred1[[b]],n=resp.matrix[,1])
        p1[[b]] <- cbind(p1[[b]],n=resp.matrix[,2])
      }
    }
  }
  
  # Assign variable names to list elements
  for (x in 1:length(pred1)){
    names(pred1)[x] <- pred.names[x]
    names(p1)[x] <- pred.names[x]
  }
  
  # Save relative contribution table
  write.table(mycontri, paste(mainDir1, savename, "_contri.csv", sep=""),
              sep=",")

  # Return all results
  myresult <- list(mycontri = mycontri,
                   model_perf = model_perf,
                   pred1 = pred1, 
                   p1 = p1,
                   mydf = dewdf)
  return(myresult)
}

#++++++++++++++++++++ Run models ++++++++++++++++++
arid_result <- brt_sample(1)
forest_result <- brt_sample(2)
grass_result <- brt_sample(3)
humid_result <- brt_sample(4)

# Save all results
save.image(paste(mainDir1,"brt_result.RData",sep = ""))


########### Create Violin Plots for Relative Contributions ###########
rm(list=ls(all=TRUE))

load("/BRTcode/result/brt_result.RData")

library(dplyr)
library(ggplot2)
library(cowplot)

#++++++++++++++++++++ Violin plot function ++++++++++++++++++
vio_plt <- function(mydt, myname){
  # mydt <- forest_result
  # myname <- "Forests"
  
  # Extract relative contribution table
  rc_dt <- mydt[[1]]
  
  # Assign unique temporary column names to avoid duplication
  colnames(rc_dt) <- make.unique(colnames(rc_dt))
  
  # Convert wide table to long format for ggplot
  long_df <- rc_dt %>%
    tibble::rownames_to_column(var = "fac") %>%  # Move row names to a column
    tidyr::pivot_longer(cols = -fac,                   # Use all columns except 'Variable'
                        names_to = "times",                    # New column for column names
                        values_to = "rc") 
  
  # Reorder factor levels for plotting
  my_order <- c('DewDur','Ta','RH','Rn','VPD','SWC')
  long_df$fac <- factor(long_df$fac, levels = rev(my_order))
  
  # Define custom colors for each variable
  custom_colors <- c(
    "DewDur" = '#E78AC3',  
    "Ta" = '#FFD92F',
    "RH" = '#A6D854',
    "Rn" = '#E5C494',      
    "VPD" = '#FC8D62',
    "SWC" = '#8DA0CB')
  
  # Plot violin + boxplot
  p <- ggplot(long_df, aes(x = rc, y = fac, fill=fac))+
    geom_violin(width=1,color="white")+
    geom_boxplot(width=0.2,cex=0.4, position=position_dodge(0.9),outlier.size=1)+
    stat_boxplot(geom = 'errorbar',width=0.1,cex=0.4)+
    # Calculate and display median values
    # stat_summary(fun = median, geom = "text", aes(label = round(..x.., 2)),
    #              hjust = -0.5, vjust = -1.2, size = 4, color = "black") +
    labs(x = "Relative Contribution (%)", y = '', title = paste(myname)) +
    scale_fill_manual(values = custom_colors) +
    xlim(0, 40)+
    theme_bw()+
    theme(
      panel.grid.minor = element_blank(),
      panel.grid.major.y = element_blank(),
      panel.grid.major.x  = element_line(size=0.5, linetype = 'dashed'),
      panel.border = element_rect(color="black", size=1),
      axis.ticks.length.x = unit(0.2, "cm"),
      axis.ticks.length.y = unit(0.2, "cm"),
      axis.ticks.x = element_line(color="black",size=1,lineend = 1),
      axis.ticks.y = element_line(color="black",size=1,lineend = 1),
      axis.text.x = element_text(size=12,color = "black"),
      axis.text.y = element_text(size=12,color = "black"),
      axis.title.x = element_text(size=14),
      legend.position="none")
  # +
  # annotate("text", x = Inf, y = Inf, hjust = 1.3, vjust = 2, 
  #          label = paste0("R² = ", round(avg_corr, 2), " ± ", round(total_se, 4)),
  #          size = 5)
  
  return(p)
}

#++++++++++++++++++++ Run violin plot function ++++++++++++++++++
p1 <- vio_plt(forest_result, "Forests")
p2 <- vio_plt(grass_result, "Grasslands")
p3 <- vio_plt(arid_result, "Arid Regions")
p4 <- vio_plt(humid_result, "Humid Regions")

# Combine all plots into one figure
combined_plot <- plot_grid(
  p1,p2,p3,p4,  
  labels = "auto",
  label_size = 20,
  scale = c(0.95),
  nrow = 2, ncol = 2) 

# Save combined plots
save_plot_all <- '/BRTcode/plt/'

save_plot(paste(save_plot_all, 'Vio_RC.jpg', sep=""),
          combined_plot,
          base_height = 10,
          base_width = 8)

save_plot(paste(save_plot_all, 'Vio_RC.pdf', sep=""),
          combined_plot,
          base_height = 10,
          base_width = 8)

########### Create Partial Dependence Plots (PDPs) ###########
rm(list=ls(all=TRUE))

load("/BRTcode/result/brt_result.RData")

library(dplyr)
library(ggplot2)
library(cowplot)

#+++++++++++++++++++ PDP plotting function +++++++++++++++++++++++++++++++
pdp_plt <- function(myfac, dt1, dt2, ob1, ob2){
  # myfac <- "DewDur"
  # dt1 <- forest_result; dt2 <- grass_result
  # ob1 <- "forest"; ob2 <- "grass"
  
  # Calculate mean x and y values for PDP from first and second dataset
  fac_dt1 <- data.frame(
    x = apply(dt1[["pred1"]][[myfac]], 1, mean) %>% round(2),
    y = apply(dt1[["p1"]][[myfac]], 1, mean) %>% round(2),
    trait = rep(ob1, times = 100)
  )
  
  fac_dt2 <- data.frame(
    x = apply(dt2[["pred1"]][[myfac]], 1, mean) %>% round(2),
    y = apply(dt2[["p1"]][[myfac]], 1, mean) %>% round(2),
    trait = rep(ob2,times = 100)
  )
  
  # Combine two data frames
  fac_dt <- rbind(fac_dt1, fac_dt2)

  # Plot PDP with LOESS smoothing  
  pp <- ggplot(fac_dt, aes(x = x, y = y, color = trait)) +
    geom_smooth(method = 'loess', span = 0.65, size = 1.2, se = TRUE) +
    scale_color_manual(values = c("#D2A679", "#3CA69A")) +
    # scale_color_manual(values = c("brown", "blue")) +
    labs(x = "Dew Duration(h)", y = "Daily GPP") +
    # ylim(-.4, .4)+
    scale_x_continuous(breaks = seq(0, 11, by = 1)) +
    # geom_hline(yintercept = 0, linetype = "dashed", color = "grey") +
    theme_bw() +
    theme(
      legend.position = c(0.5, 0.8),
      panel.grid = element_blank()
    )
  
  return(pp)
}

#++++++++++++++++++++ Run PDP plots ++++++++++++++++++
p1 <- pdp_plt("DewDur",forest_result, grass_result,
              "Forests","Grasslands")

p2 <- pdp_plt("DewDur",arid_result, humid_result,
              "Arid Regions","Humid Regions")

# Combine PDPs into one figure
combined_plot <- plot_grid(p1,p2,
  labels = "auto",
  label_size = 20,
  scale = c(0.95),
  nrow = 1, ncol = 2) 

# Save PDP plots
save_plot_all <- '/BRTcode/plt/'

save_plot(paste(save_plot_all, 'PDP.jpg', sep=""),
          combined_plot,
          base_height = 8,
          base_width = 10)

save_plot(paste(save_plot_all, 'PDP.pdf', sep=""),
          combined_plot,
          base_height = 8,
          base_width = 10)
